<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Devhua&#39;s Blog</title>
  <subtitle>爱生活，有理想，会思考，能沟通！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.devhua.com/"/>
  <updated>2017-04-25T03:53:41.000Z</updated>
  <id>https://www.devhua.com/</id>
  
  <author>
    <name>洛上倾城华少</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WKWebview tips</title>
    <link href="https://www.devhua.com/2017/04/24/iOS-WKWebview-Tips/"/>
    <id>https://www.devhua.com/2017/04/24/iOS-WKWebview-Tips/</id>
    <published>2017-04-24T09:38:04.000Z</published>
    <updated>2017-04-25T03:53:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WKWebview-踩坑之旅（正在更新…）"><a href="#WKWebview-踩坑之旅（正在更新…）" class="headerlink" title="WKWebview 踩坑之旅（正在更新…）"></a>WKWebview 踩坑之旅（正在更新…）</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>关于iOS 8后出来的WKWebview的简介，及对比UIWebview的优势 就不再做赘述了。可以参考<br><a href="http://nshipster.cn/wkwebkit/" target="_blank" rel="external">nshipster介绍WKWebview</a><br>学习WKWebview需研究<a href="https://github.com/WebKit/webkit" target="_blank" rel="external">源码</a>，可以调试下miniBrowser项目</p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在WKWebview出来这几年后，老项目一直未迁移到wkwebview，尽管我们知道它有着60 fps滚动刷新率，内存占用少，和safari相同的JavaScript引擎等优势，但由于其本身的不完善和一些坑点以及迁移的工作量等问题，一直未深入研究迁移方案。<br>但多个UIWebview浏览的内存暴涨导致容易crash一直是块心病。于是还是尝试迁移到wkwebview，便有了一段<strong>踩坑之旅</strong>。</p>
<h3 id="WKWebview使用注意点"><a href="#WKWebview使用注意点" class="headerlink" title="WKWebview使用注意点"></a>WKWebview使用注意点</h3><p>网上也已经有不少使用注意点的总结文章，在此先贴出了，然后讲些自己遇到的问题和处理方案。<br><a href="http://mp.weixin.qq.com/s/rhYKLIbXOsUJC_n6dt9UfA" target="_blank" rel="external">WKWebView 那些坑</a><br><a href="https://github.com/ShingoFukuyama/WKWebViewTips" target="_blank" rel="external">WKWebviewTips</a></p>
<h4 id="1-加载本地html注意区分系统版本"><a href="#1-加载本地html注意区分系统版本" class="headerlink" title="1. 加载本地html注意区分系统版本"></a>1. 加载本地html注意区分系统版本</h4><p>iOS9及以上版本可以使用<br><code>[self.webview loadRequest:request]</code></p>
<p><strong>本地资源生成的request在iOS8下无法加载</strong><br>iOS8下加载本地文件: <code>[self.webview loadHTMLString:str]</code><br> <a href="http://stackoverflow.com/questions/27803341/swift-wkwebview-loading-local-file-not-working-on-a-device" target="_blank" rel="external">http://stackoverflow.com/questions/27803341/swift-wkwebview-loading-local-file-not-working-on-a-device</a></p>
<h4 id="2-跨域跳转处理"><a href="#2-跨域跳转处理" class="headerlink" title="2.跨域跳转处理"></a>2.跨域跳转处理</h4><p><code>- (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler</code><br>此代理中对于一些<code>navigationAction.navigationType</code>跳转类型判断需要注意自己处理。不然容易出现点击页面链接无响应。</p>
<h4 id="3-共享cookie问题"><a href="#3-共享cookie问题" class="headerlink" title="3.共享cookie问题"></a>3.共享cookie问题</h4><p>如果有同时开多个网页的需求，这就需要注意共享cookie了。由于本身WKWebview中使用到了WKProcessPool，导致多个wkwebview间无法共享cookie。查看<a href="https://github.com/mozilla-mobile/firefox-ios/blob/master/Client/Frontend/Browser/TabManager.swift" target="_blank" rel="external">firefox源码</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// A WKWebViewConfiguration used for normal tabs</div><div class="line">    lazy fileprivate var configuration: WKWebViewConfiguration = &#123;</div><div class="line">        let configuration = WKWebViewConfiguration()</div><div class="line">        configuration.processPool = WKProcessPool()</div><div class="line">        configuration.preferences.javaScriptCanOpenWindowsAutomatically = !(self.prefs.boolForKey(&quot;blockPopups&quot;) ?? true)</div><div class="line">        return configuration</div><div class="line">    &#125;()</div><div class="line"></div><div class="line">    // A WKWebViewConfiguration used for private mode tabs</div><div class="line">    lazy fileprivate var privateConfiguration: WKWebViewConfiguration = &#123;</div><div class="line">        let configuration = WKWebViewConfiguration()</div><div class="line">        configuration.processPool = WKProcessPool()</div><div class="line">        configuration.preferences.javaScriptCanOpenWindowsAutomatically = !(self.prefs.boolForKey(&quot;blockPopups&quot;) ?? true)</div><div class="line">        configuration.websiteDataStore = WKWebsiteDataStore.nonPersistent()</div><div class="line">        return configuration</div><div class="line">    &#125;()</div></pre></td></tr></table></figure>
<p>以上代码是firefox在正常模式及隐私模式下创建的configuration.<br>当然，在app被kill掉后再启动又会被重置，导致pool中的cookie数据丢失。如果不是做浏览器，而是自身app与服务器打交道，可以考虑把cookie信息在请求前手动加上header中。<br>参考：<br><a href="http://stackoverflow.com/questions/39772007/wkwebview-persistent-storage-of-cookies" target="_blank" rel="external">http://stackoverflow.com/questions/39772007/wkwebview-persistent-storage-of-cookies</a></p>
<p><a href="http://stackoverflow.com/questions/26573137/can-i-set-the-cookies-to-be-used-by-a-wkwebview" target="_blank" rel="external">http://stackoverflow.com/questions/26573137/can-i-set-the-cookies-to-be-used-by-a-wkwebview</a></p>
<p><a href="http://stackoverflow.com/questions/33156567/getting-all-cookies-from-wkwebview" target="_blank" rel="external">http://stackoverflow.com/questions/33156567/getting-all-cookies-from-wkwebview</a></p>
<h4 id="4-部分特殊页面点击链接事件失效"><a href="#4-部分特殊页面点击链接事件失效" class="headerlink" title="4.部分特殊页面点击链接事件失效"></a>4.部分特殊页面点击链接事件失效</h4><p>在浏览部分邮箱页面（）在新标签页打开 ( wkwebview )时<br>//例如：target = “_blank”</p>
<p><code>&lt;a href=&quot;https://m.baidu.com/?tn=&amp;amp;from=1018225b&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; class=&quot;&quot;&gt;https://m.baidu.com/?tn=&amp;amp;from=1018225b&lt;/a&gt;</code></p>
<p>点击链接后，在这个<code>- (WKWebView *)webView:(WKWebView *)webView createWebViewWithConfiguration:(WKWebViewConfiguration *)configuration forNavigationAction:(WKNavigationAction *)navigationAction windowFeatures:(WKWindowFeatures *)windowFeatures</code>代理中收到的<code>request.url</code>为空，无法获取到正确请求。<br>这个问题在firefox上也有且未解决，然而Safari上都是正常的（苹果还是老奸巨猾啊。。）<br>参考: <a href="http://swiftgazelle.com/2015/08/wkwebview-target_blank-quirks/" target="_blank" rel="external">WKWebview-target-blank-quirks</a><br>当然UIWebview也有这样的问题，莫名其妙在CreateNewWebview代理中获取到的request为空，不过，UIWebview可以通过一些私有方式，很方便的获取到网页内部信息。</p>
<h4 id="5-页面跳转后再返回不会执行script和Ajax"><a href="#5-页面跳转后再返回不会执行script和Ajax" class="headerlink" title="5.页面跳转后再返回不会执行script和Ajax"></a>5.页面跳转后再返回不会执行script和Ajax</h4><p><strong>从页面a进入页面b再返回页面a后不会重新执行script和Ajax，也不会触发页面reload，此部分情况需要针对实际场景做处理，手动reload。</strong></p>
<h4 id="6-数据清除"><a href="#6-数据清除" class="headerlink" title="6.数据清除"></a>6.数据清除</h4><p>iOS 8下<code>WKWebsiteDataStore</code>还不支持，因此需要手动删除Cookies，Caches，Webkit文件夹（注意数据保存的路径问题）<br>iOS 9虽然有<code>WKWebsiteDataStore</code>接口，但实际使用起来会有概率性crash情况。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">NSSet *websiteDataTypes</div><div class="line">= [NSSet setWithArray:@[</div><div class="line">                        WKWebsiteDataTypeDiskCache,</div><div class="line">                        WKWebsiteDataTypeOfflineWebApplicationCache,</div><div class="line">                        WKWebsiteDataTypeMemoryCache,</div><div class="line">                        WKWebsiteDataTypeLocalStorage,</div><div class="line">                        WKWebsiteDataTypeCookies,</div><div class="line">                        WKWebsiteDataTypeSessionStorage,</div><div class="line">                        WKWebsiteDataTypeIndexedDBDatabases,</div><div class="line">                        WKWebsiteDataTypeWebSQLDatabases</div><div class="line">                        ]];</div><div class="line">//// All kinds of data</div><div class="line">//NSSet *websiteDataTypes = [WKWebsiteDataStore allWebsiteDataTypes];</div><div class="line">//// Date from</div><div class="line">NSDate *dateFrom = [NSDate dateWithTimeIntervalSince1970:0];</div><div class="line">//// Execute</div><div class="line">[[WKWebsiteDataStore defaultDataStore] removeDataOfTypes:websiteDataTypes modifiedSince:dateFrom completionHandler:^&#123;</div><div class="line">   // Done</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p><strong>因此建议直接根据路径删除文件夹（iOS 8和iOS 9后数据保存的路径不一致，需要判断）</strong></p>
<h4 id="7-横竖屏切换调整wkwebview视图"><a href="#7-横竖屏切换调整wkwebview视图" class="headerlink" title="7.横竖屏切换调整wkwebview视图"></a>7.横竖屏切换调整wkwebview视图</h4><h3 id="wkwebview刷新机制"><a href="#wkwebview刷新机制" class="headerlink" title="wkwebview刷新机制"></a>wkwebview刷新机制</h3><p>在一些低端机型上，滑动webview时明显就一段一段的白屏出现，跟UIWebview表现差远了。这引起了兴趣，查看并研究了下源码，发现wkwebview并不是跟uiwebview一样渲染所有网络数据，而是一屏一屏的渲染，也是这样才有了内存占用少的优势。也有一篇源码的文章推荐下<a href="http://www.jianshu.com/p/1d739e2e7ed2" target="_blank" rel="external">WKWebView刷新机制小探</a></p>
<blockquote>
<p>WKContentView就是WKWebView内容渲染的容器。在Reveal的树状图上面可以看到，渲染页面中，展示在页面上的渲染单元是WKCompositingView，WKCompositingView可以嵌套WKCompositingView。其中的一个WKCompositingView实例，将包含多个WKCompositingView子实例。类似于UITableView的重用机制，多个WKCompositingView的父View就相当于UITableView，WKCompositingView就相当于UITableViewCell，只展示可视区域的内容，达到性能优化的目的。</p>
<p>一个WKWebView加载的web内容，切割成多个WKCompositingView，单个WKCompositingView重用单元的面积是375x512点。</p>
</blockquote>
<p>从源码入手确实可以看到很多实现细节，但真正想要想像UIWebview一样hook掉很多系统属性和方法是不可能的，只能说苹果做的真绝。。</p>
<p>理解了这个刷新机制后，在做一些类似新闻类，有多个wkwebview当做uiview add到tableview上，即使竖向滚动也可以绑定wkwebview的scrollview的刷新渲染了。（<code>[WKWebView _updateVisibleContentRects]</code>）<br>推荐的文章最后说使用以下3个方法解决白屏问题：</p>
<ul>
<li>用KVO方法监听UITableView的contnetOffset属性，contentOffset发生变化也就是说UITableView发生滚动，调用WKWebView实例的_updateVisibleContentRects，刷新需要渲染的内容</li>
<li>UITableView是继承自UIScrollView的，在代码中实现UIScrollView的delegate，在delegate实现中手动调用WKWebView实例等UIScrollViewDelegate的方法，原理和第一种方法一样</li>
<li>使用CADisplayLink类，在CADisplayLink的回调方法里面调用WKWebView实例的_updateVisibleContentRects即可</li>
</ul>
<p>真正操作时你会发现，在快速滑动UITableView时，代理暴露出来的点跨度很大，完全不连贯，导致刷新内部webview的内容不及时。<strong>因此推荐使用CADisplaylink类，利用屏幕刷新机制去触发wkwebview实例的刷新。</strong></p>
<h3 id="wkwebview致命缺陷-NSURLProtocol问题"><a href="#wkwebview致命缺陷-NSURLProtocol问题" class="headerlink" title="wkwebview致命缺陷 - NSURLProtocol问题"></a>wkwebview致命缺陷 - NSURLProtocol问题</h3><p>（待更新）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;WKWebview-踩坑之旅（正在更新…）&quot;&gt;&lt;a href=&quot;#WKWebview-踩坑之旅（正在更新…）&quot; class=&quot;headerlink&quot; title=&quot;WKWebview 踩坑之旅（正在更新…）&quot;&gt;&lt;/a&gt;WKWebview 踩坑之旅（正在更新…）&lt;/
    
    </summary>
    
      <category term="技术" scheme="https://www.devhua.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="https://www.devhua.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS应用脱壳与重签名</title>
    <link href="https://www.devhua.com/2016/11/05/iOS%E5%BA%94%E7%94%A8%E8%84%B1%E5%A3%B3%E5%92%8C%E9%87%8D%E7%AD%BE%E5%90%8D/"/>
    <id>https://www.devhua.com/2016/11/05/iOS应用脱壳和重签名/</id>
    <published>2016-11-05T02:28:40.000Z</published>
    <updated>2017-04-24T05:54:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前期干货"><a href="#前期干货" class="headerlink" title="前期干货"></a>前期干货</h2><p><a href="http://www.mottoin.com/92530.html" target="_blank" rel="external">iOS破壳</a></p>
<p><a href="http://blog.csdn.net/oyzhx/article/details/38339129" target="_blank" rel="external">用dumpdecrypted给App砸壳</a></p>
<p><a href="http://www.cnblogs.com/ludashi/p/5725743.html" target="_blank" rel="external">iOS逆向工程之给App脱壳</a></p>
<p><a href="https://testerhome.com/topics/4558" target="_blank" rel="external">给微信加 hook 尝试记录</a></p>
<p><a href="http://www.jianshu.com/p/189afbe3b429" target="_blank" rel="external">一步一步实现iOS微信自动抢红包(非越狱)
</a></p>
<h3 id="工具："><a href="#工具：" class="headerlink" title="工具："></a>工具：</h3><p>hopper：对脱壳app进行反汇编、反编译 可以分析app二进制文件<br>dumpdecrypted：用于脱壳<br>class-dump：对脱壳app 导出头文件</p>
<p>越狱设备一台（当时是6s Plus ,ios9.2）<br>越狱后安装有 cydia ，通过cydia安装openSSH，可以通过网段连接到mac</p>
<a id="more"></a>
<h3 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h3><p>步骤：</p>
<ul>
<li>下载 dumpdecrypted源码，然后在dumpdecrypted目录下make，生成dumpdecrypted.dylib文件</li>
<li>电脑连接越狱设备（同一网段）：ssh root@192.168.13.230<br>root@192.168.13.230’s password:<br>openSSH的连接默认密码为:alpine。</li>
<li>电脑连上手机后查询当前运行进程 ps -e | grep /var/mobile<br>此处直接打印出手机安装app的进程</li>
<li>将电脑中make生成的dumpdecrypted.dylib文件 使用 scp 指令复制到 手机的/var/tmp/ 目录</li>
<li>脱壳指令：6sPlus:/var/tmp root# DYLD_INSERT_LIBRARIES=dumpdecrypted.dylib /var/mobile/Containers/Bundle/Application/6E1CC0B2-4DB7-4F37-B715-FAA317EEC469/WeChat.app/WeChat<br>此指令只能在当前/var/tmp/ 目录下执行</li>
<li>完成后在手机/var/tmp/目录下ls查看，得到WeChat.decrypted文件（目标脱壳文件）</li>
<li>将脱壳文件使用scp拷贝到电脑：scp root@192.168.13.230:/var/tmp/WeChat.decrypted /Users/xxx/Desktop</li>
<li>使用指令 otool -l WeChat.decrypted | grep crypt  (查看是否脱壳)<br>使用指令class-dump -S -s -H WeChat.decrypted -o ./Headers（dump出头文件）</li>
</ul>
<p>过程中的坑点：</p>
<p>架构问题：这次越狱设备是arm64架构的，dumpdecrypted编译出的是支持arm64，还有class-dump指令也是直接arm64.如果你越狱设备是armv7的则需要修改配置</p>
<p>iOS9.2越狱设备：在网上查资料，好多说是要将dumpdecrypted.dylib文件拷贝到 目标app的document目录下，可是越狱设备安装了很多app，完全不好确定目标app的document目录，本来可以使用Cycript注入目标进程中（cycript -p WeChat），然后执行[[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask][0] 获取目标进程的Document目录，然后复制文件过去就好。可是实施发现，iOS9.2越狱设备下使用Cycript指令后终端一直卡死，无显示。（设备确认安装了Cycript，应该是Cycript插件不支持iOS9.2），这样就无法获取目标app的document目录！好在发现直接把dumpdecrypted.dylib放在手机的/var/tmp/目录下，执行脱壳指令也是可行的！</p>
<h2 id="重签名app"><a href="#重签名app" class="headerlink" title="重签名app"></a>重签名app</h2><p><a href="http://forums.macnn.com/79/developer-center/355720/how-re-sign-apples-applications-once/" target="_blank" rel="external">《How to re-sign Apple’s applications once they’ve been modified》</a></p>
<p><a href="http://www.ifun.cc/blog/2014/02/22/ios-appzhong-xin-qian-ming-fang-fa-jie-shao/" target="_blank" rel="external">中文简版步骤</a></p>
<p>步骤：</p>
<ul>
<li>查看有效的证书 : security find-identity -v -p codesigning</li>
<li>检查目标app签名情况：codesign -dvvv EmojiKeyboard.app</li>
<li>删除ipa中之前的签名文件:rm -rf Payload/*.app/_CodeSignature/</li>
<li>拷贝新的provision profile替换旧的embedded.mobileprovision（这个provision profile需要是distribution provision，可以找之前项目的）  cp 123.mobileprovision Payload/*.app/embedded.mobileprovision</li>
<li>重签名：codesign -f -s (name of certificate) /path/to/application</li>
</ul>
<p>例如：<br>➜  Payload codesign -f -s “iPhone Developer: xxx@xxx.com (9283B989BB)” xxx.app<br>xxx.app: replacing existing signature<br>➜  Payload codesign -dvvv xxx.app</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前期干货&quot;&gt;&lt;a href=&quot;#前期干货&quot; class=&quot;headerlink&quot; title=&quot;前期干货&quot;&gt;&lt;/a&gt;前期干货&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.mottoin.com/92530.html&quot;&gt;iOS破壳&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/oyzhx/article/details/38339129&quot;&gt;用dumpdecrypted给App砸壳&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/ludashi/p/5725743.html&quot;&gt;iOS逆向工程之给App脱壳&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://testerhome.com/topics/4558&quot;&gt;给微信加 hook 尝试记录&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/189afbe3b429&quot;&gt;一步一步实现iOS微信自动抢红包(非越狱)
&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;工具：&quot;&gt;&lt;a href=&quot;#工具：&quot; class=&quot;headerlink&quot; title=&quot;工具：&quot;&gt;&lt;/a&gt;工具：&lt;/h3&gt;&lt;p&gt;hopper：对脱壳app进行反汇编、反编译 可以分析app二进制文件&lt;br&gt;dumpdecrypted：用于脱壳&lt;br&gt;class-dump：对脱壳app 导出头文件&lt;/p&gt;
&lt;p&gt;越狱设备一台（当时是6s Plus ,ios9.2）&lt;br&gt;越狱后安装有 cydia ，通过cydia安装openSSH，可以通过网段连接到mac&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://www.devhua.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="https://www.devhua.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>非典型程序猿羊年总结</title>
    <link href="https://www.devhua.com/2016/02/05/annual-summary-of-programmer/"/>
    <id>https://www.devhua.com/2016/02/05/annual-summary-of-programmer/</id>
    <published>2016-02-05T11:28:40.000Z</published>
    <updated>2017-04-24T04:07:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>14年底到15年年初的工作一言难尽，自己从嵌入式转到iOS开发，新的平台新的部门都需要重新学习和提高，压力可想而知。年初终于在我们大C司定岗，正式成为一个iOS开发，非常感谢我的三位iOS启蒙导师（李思哥哥、陆爷、彦群），他们帮助我跨过前期的障碍，也看到移动开发技术的未来。总体来讲，自己看到既年轻又活跃的天空，跟着团队也逐步认识到了一个创业团队的磨合期和碰撞期。<strong>风云变幻，莫笑少年愁</strong>。</p>
<a id="more"></a>
<p>毕竟是属于在集团内部创业的团队，业绩表现是团队影响最直观的因素，做出的产品销量达不到，则必须精简人员投入。于是乎，我也在3月底转入了新的部门，新的创业团队。<br>新的团队，自己又要重新熟悉团队产品及开发，当然这也给了我更多的机会。在逐步熟悉产品和技术的过程中，自己也跟着double dragon慢慢将iOS开发流程建立起来了（各种试错过程也是尴尬）。在这期间自己的技术成长还是蛮大的，团队初期的敏捷开发流程也很熟悉了。能够在团队里发挥这些作用，也使得自己收获到了成就感。</p>
<p>当然，除了技术方面，自己在团队协作方面也能提出一些见解，而团队的产品也是从无到有，经历了各种发布和改版。无数的讨论脑暴，和设计狮产品汪“对喷”，同样直面用户的“指手画脚”，都是自己一生的收获。感谢大家的努力，希望新的一年，咱们的产品能更加稳定、易用，抓住细节，优化体验。</p>
<h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p>说到技术，太多细节，想想还是简而言之比较好。这一年自己的成长主要是对cocoa框架更加熟悉，对于HTTP网络层的封装有了较为深入的思考，蓝牙模块也比较熟悉，学习了swift开发等等。看了无数片博客，发现目前国内的iOS开发技术的开发性也很强，在这里要赞一下开源社区。与时俱进，自己经常关注微博，订阅（RSS）界内很多博客，还有些国外的论坛博客，都是非常好多资源。通过奇妙清单列出自己近期的学习计划，每周抽空回顾，找一个点好好研究下。这种方式帮助我了解很多iOS开发新奇时尚以及优化的做法。推荐大家使用。</p>
<h3 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h3><p>在年初时，大C司组建了自己的球队，作为篮球极度爱好者，果断参加。上半年还跑遍广州各种打比赛，气氛异常high。自己每周六下午都会跟大家打一次篮球，酣畅淋漓！而大广州在五六月份连续不断的下雨也是醉了，连着两个月打不了球，等到天气好点放晴了才突然发现，每周六打球的气氛也没有了。自己也转移到健身，从四月多开始，去健身房虐胸，在寝室里虐腹（Keep）。一度还带着团队的几个小伙伴一起健身，可是发现各种无法坚持下去。。年底公司的健身房重新开张后，自己去健身的频率更高了。有时一周五次，每次都是精疲力尽。我想，健身必定是一剂毒药，让人疯狂的爱上它。16年，希望自己继续坚持下去~</p>
<h3 id="旅游"><a href="#旅游" class="headerlink" title="旅游"></a>旅游</h3><blockquote>
<p>“要么旅行，要么读书，身体和灵魂必须有一个在路上。”</p>
</blockquote>
<p>可是，旅行和读书怎么想都是孤独的，是一个人的事情。有时候，累了、烦了，背起行囊就去逃离、去发现。</p>
<p>于是乎，在十二月初利用整年都没有使用的年假去了趟云南。都说“下关风，上关花，苍山雪，洱海月”是大理四绝！那时还特意把仙剑奇侠传电视剧看了一遍，“灵儿，我要送你回南诏国”，多么令人神往的地方呀~</p>
<p>昆明——丽江——大理，满满的行程也非常舒心！自由行的好处就在于每天不用那么赶，不会收导游脸色。自己想去哪就去哪，想待多久就多久。在丽江时，由于是淡季住在古城当地人开的客栈里，却被忽悠带到拉市海骑马，差点被坑了。丽江古城晚上非常热闹，很多酒吧夜市，但要注意好多酒托。现在古城商业化比较严重，也没看到什么想买的东西，于是直接去大理了。在大理古城外租一辆轿车，先开车围着洱海转了大半圈，到双廊住下后才发觉如此舒服。白天享受着冬日的暖阳，面对着洱海，心里非常放松。在暖暖客栈看看旅行人儿的留言，骑着小电驴围着洱海慢悠悠的绕着，享受着逃离现实般的梦幻。这一切回味起来真是让人迷恋。还记得当时就说了句，我一定还会再来！一路上也遇到了很多小伙伴，来自各地的朋友齐聚这里，还有一些直接在客栈打短工，都非常的有趣，都被洱海的风光所吸引。</p>
<p><strong>一年的总结就到这里，2016年，也不定什么目标了，只要对自己好一点，对自己狠一点。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;工作&quot;&gt;&lt;a href=&quot;#工作&quot; class=&quot;headerlink&quot; title=&quot;工作&quot;&gt;&lt;/a&gt;工作&lt;/h3&gt;&lt;p&gt;14年底到15年年初的工作一言难尽，自己从嵌入式转到iOS开发，新的平台新的部门都需要重新学习和提高，压力可想而知。年初终于在我们大C司定岗，正式成为一个iOS开发，非常感谢我的三位iOS启蒙导师（李思哥哥、陆爷、彦群），他们帮助我跨过前期的障碍，也看到移动开发技术的未来。总体来讲，自己看到既年轻又活跃的天空，跟着团队也逐步认识到了一个创业团队的磨合期和碰撞期。&lt;strong&gt;风云变幻，莫笑少年愁&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://www.devhua.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="总结" scheme="https://www.devhua.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>GCD死锁大作战</title>
    <link href="https://www.devhua.com/2016/01/25/iOS-GCD-deadlock/"/>
    <id>https://www.devhua.com/2016/01/25/iOS-GCD-deadlock/</id>
    <published>2016-01-25T03:12:02.000Z</published>
    <updated>2017-04-24T04:07:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GCD死锁大作战"><a href="#GCD死锁大作战" class="headerlink" title="GCD死锁大作战"></a>GCD死锁大作战</h2><h3 id="什么是死锁"><a href="#什么是死锁" class="headerlink" title="什么是死锁"></a>什么是死锁</h3><p><a href="https://en.wikipedia.org/wiki/Deadlock" target="_blank" rel="external">死锁（deadlock)</a> 通常是当多个线程在相互等待着对方的结束时，就会发生死锁，这时程序可能会被卡住。此时就导致了deadlock！<br><img src="/2016/01/25/iOS-GCD-deadlock/dead-lock.png" alt="dead-lock.png"></p>
<h3 id="串行与并行"><a href="#串行与并行" class="headerlink" title="串行与并行"></a>串行与并行</h3><blockquote>
<p>在使用GCD的时候，我们会把需要处理的任务放到Block中，然后将任务追加到相应的队列里面，这个队列，叫做Dispatch Queue。然而，存在于两种Dispatch Queue，一种是要等待上一个执行完，再执行下一个的Serial Dispatch Queue，这叫做串行队列；另一种，则是不需要上一个执行完，就能执行下一个的Concurrent Dispatch Queue，叫做并行队列。这两种，均<strong>遵循FIFO原则</strong>。</p>
</blockquote>
<p><code>dispatch_get_global_queue</code>为全局并行队列</p>
<p><code>dispatch_get_main_queue</code>为主线程串行队列</p>
<a id="more"></a>
<p>自己也可以创建队列：</p>
<p>//创建串行队列<br><code>dispatch_queue_create(&quot;com.demo.serialQueue&quot;, DISPATCH_QUEUE_SERIAL)</code></p>
<p>//创建并行队列<br><code>dispatch_queue_create(&quot;com.demo.concurrentQueue&quot;, DISPATCH_QUEUE_CONCURRENT)</code></p>
<h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h3><p>首先同步异步是对于线程来说的，主要区别是是否等待IO操作（并不一定是）执行完成，即是否阻塞当前线程，其中的 IO 操作肯定是别的线程去执行的</p>
<blockquote>
<p>并发执行的多个任务中可能存在多个线程，其中的多个线程有可能是同步执行的 也有可能是异步执行的</p>
</blockquote>
<p>//同步线程<br><code>dispatch_sync(某个队列信息,^(block))</code></p>
<p>//异步线程<br><code>dispatch_async(某个队列信息,^(block))</code> </p>
<h3 id="让我们来解锁吧"><a href="#让我们来解锁吧" class="headerlink" title="让我们来解锁吧"></a>让我们来解锁吧</h3><p><strong>当前串行队列里面同步执行当前串行队列就会死锁，解决的方法就是将同步的串行队列放到另外一个线程就能够解决。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NSLog(@&quot;1&quot;);</div><div class="line">dispatch_sync(dispatch_get_main_queue(), ^&#123;</div><div class="line">   NSLog(@&quot;2&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><del>这里的死锁不是因为在主线程执行，而是在main_queue内部的两个任务：dispatch_sync和NSLog相互等待导致。NSLog(@”2”)要等dispatch_sync执行完，而在执行NSLog(@”2”)执行完以前，dispatch_sync又不会结束。</del></p>
<p><strong>实际上，这里在主线程运行（串行线程），在主线程（当前串行队列）同步执行打印2时会产生互相等待而死锁。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">NSLog(@&quot;1&quot;);</div><div class="line">//3会等2，因为2在全局并行队列里，不需要等待3，这样2执行完回到主队列，3就开始执行</div><div class="line">dispatch_sync(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^&#123;</div><div class="line">   NSLog(@&quot;2&quot;);</div><div class="line">&#125;);</div><div class="line">NSLog(@&quot;3&quot;);</div></pre></td></tr></table></figure>
<p>这里不死锁，同步任务在全局并行队列中，因此2执行完就跳转到主线程执行3。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_t serialQueue = dispatch_queue_create(&quot;com.starming.gcddemo.serialqueue&quot;, DISPATCH_QUEUE_SERIAL);</div><div class="line">NSLog(@&quot;1&quot;);</div><div class="line">dispatch_async(serialQueue, ^&#123;</div><div class="line">   NSLog(@&quot;2&quot;);</div><div class="line">   //串行队列里面同步一个串行队列就会死锁</div><div class="line">   dispatch_sync(serialQueue, ^&#123;</div><div class="line">       NSLog(@&quot;3&quot;);</div><div class="line">   &#125;);</div><div class="line">   NSLog(@&quot;4&quot;);</div><div class="line">&#125;);</div><div class="line">NSLog(@&quot;5&quot;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">   NSLog(@&quot;1&quot;);</div><div class="line">   //回到主线程发现死循环后面就没法执行了</div><div class="line">   dispatch_sync(dispatch_get_main_queue(), ^&#123;</div><div class="line">       NSLog(@&quot;2&quot;);</div><div class="line">   &#125;);</div><div class="line">   NSLog(@&quot;3&quot;);</div><div class="line">&#125;);</div><div class="line">NSLog(@&quot;4&quot;);</div><div class="line">//死循环</div><div class="line">while (1) &#123;</div><div class="line">   //</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>以上部分欢迎讨论</strong></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://objccn.io/issue-2-1/#dead_locks" target="_blank" rel="external">并发编程</a><br><a href="https://www.zybuluo.com/MicroCai/note/64272" target="_blank" rel="external">Effective Objective-C Notes：GCD 实现同步锁</a><br><a href="http://www.jianshu.com/p/fbe6a654604c" target="_blank" rel="external">细说GCD（Grand Central Dispatch）如何用</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;GCD死锁大作战&quot;&gt;&lt;a href=&quot;#GCD死锁大作战&quot; class=&quot;headerlink&quot; title=&quot;GCD死锁大作战&quot;&gt;&lt;/a&gt;GCD死锁大作战&lt;/h2&gt;&lt;h3 id=&quot;什么是死锁&quot;&gt;&lt;a href=&quot;#什么是死锁&quot; class=&quot;headerlink&quot; title=&quot;什么是死锁&quot;&gt;&lt;/a&gt;什么是死锁&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Deadlock&quot;&gt;死锁（deadlock)&lt;/a&gt; 通常是当多个线程在相互等待着对方的结束时，就会发生死锁，这时程序可能会被卡住。此时就导致了deadlock！&lt;br&gt;&lt;img src=&quot;/2016/01/25/iOS-GCD-deadlock/dead-lock.png&quot; alt=&quot;dead-lock.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;串行与并行&quot;&gt;&lt;a href=&quot;#串行与并行&quot; class=&quot;headerlink&quot; title=&quot;串行与并行&quot;&gt;&lt;/a&gt;串行与并行&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在使用GCD的时候，我们会把需要处理的任务放到Block中，然后将任务追加到相应的队列里面，这个队列，叫做Dispatch Queue。然而，存在于两种Dispatch Queue，一种是要等待上一个执行完，再执行下一个的Serial Dispatch Queue，这叫做串行队列；另一种，则是不需要上一个执行完，就能执行下一个的Concurrent Dispatch Queue，叫做并行队列。这两种，均&lt;strong&gt;遵循FIFO原则&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;dispatch_get_global_queue&lt;/code&gt;为全局并行队列&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dispatch_get_main_queue&lt;/code&gt;为主线程串行队列&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://www.devhua.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="https://www.devhua.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Change Your App Icon at build time</title>
    <link href="https://www.devhua.com/2016/01/06/Change-Your-App-Icon-at-Build-time/"/>
    <id>https://www.devhua.com/2016/01/06/Change-Your-App-Icon-at-Build-time/</id>
    <published>2016-01-06T10:48:40.000Z</published>
    <updated>2017-04-24T04:06:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h2><p>为了<strong>区分线上版本、测试版本以及调试版本</strong>，我们在开发过程中一般会修改bunlde Id以便在一个设备上安装不同版本的App。然而问题来了，如何快速区分出桌面上的App是什么版本呢？最直观的就是<strong>改变App图标</strong>，达到显而易见的目的。</p>
<hr>
<p>在看了<a href="http://www.cocoachina.com/ios/20150909/13354.html" target="_blank" rel="external">这篇译文</a>后，利用脚本可以非常便利的实现这个需求（<a href="https://www.raywenderlich.com/105641/change-app-icon-build-time" target="_blank" rel="external">这是原文</a>）。虽然译文翻译有些问题，但还是确实让大家能伸手一把（原文作者真心是手把手教学）。</p>
<a id="more"></a>
<h2 id="实际工作"><a href="#实际工作" class="headerlink" title="实际工作"></a>实际工作</h2><p>实际上，原文中对脚本解释的非常清楚，我这里简单记录下，顺便提一下注意点。</p>
<p><strong>实现原理</strong>：在Xcode下build时，运行一个shell脚本，使用ImageMagick这个图像处理软件套件进行图标转换和组合，替换掉原本设置的AppIcon。</p>
<p><strong>实现步骤</strong>：</p>
<ul>
<li>使用brew安装ImageMagick brew install ImageMagick</li>
<li>安装Ghostscript brew install ghostscript 它提供了支持ImageMagick的字体</li>
<li>将需要组合的调试图片放到项目根目录</li>
<li>将以下脚本加入到项目中</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">IFS=$&apos;\n&apos;</div><div class="line">echo &quot;ready change app icon&quot;</div><div class="line">buildNumber=$(/usr/libexec/PlistBuddy -c &quot;Print CFBundleVersion&quot; &quot;$INFOPLIST_FILE&quot;)</div><div class="line">versionNumber=$(/usr/libexec/PlistBuddy -c &quot;Print CFBundleShortVersionString&quot; &quot;$INFOPLIST_FILE&quot;)</div><div class="line">echo &quot;$&#123;BUILT_PRODUCTS_DIR&#125;/$&#123;UNLOCALIZED_RESOURCES_FOLDER_PATH&#125;&quot;</div><div class="line">echo &quot;$&#123;SRCROOT&#125;&quot;</div><div class="line">echo $(find $&#123;SRCROOT&#125; -name &quot;AppIcon76x76@2x~ipad.png&quot;)</div><div class="line">PATH=$&#123;PATH&#125;:/usr/local/bin</div><div class="line"></div><div class="line">function changeAppIcon () &#123;</div><div class="line">    BASE_IMAGE_NAME=$1</div><div class="line">    TARGET_PATH=&quot;$&#123;BUILT_PRODUCTS_DIR&#125;/$&#123;UNLOCALIZED_RESOURCES_FOLDER_PATH&#125;/$&#123;BASE_IMAGE_NAME&#125;&quot;</div><div class="line">    BASE_IMAGE_PATH=$(find $&#123;SRCROOT&#125; -name $&#123;BASE_IMAGE_NAME&#125;)</div><div class="line">    WIDTH=$(identify -format %w $&#123;BASE_IMAGE_PATH&#125;)</div><div class="line">    FONT_SIZE=$(echo &quot;$WIDTH * .2&quot; | bc -l)</div><div class="line">    echo &quot;CFBundleVersion = $buildNumber&quot;</div><div class="line">    echo &quot;CFBundleShortVersionString = $versionNumber&quot;</div><div class="line">    if [ &quot;$&#123;CONFIGURATION&#125;&quot; == &quot;Debug&quot; ]; then</div><div class="line">    convert debugRibbon.png -resize $WIDTHx$WIDTH resizedRibbon.png</div><div class="line">    convert $&#123;BASE_IMAGE_PATH&#125; -fill white -font Times-Bold -pointsize $&#123;FONT_SIZE&#125; -gravity south -annotate 0 &quot;$buildNumber&quot; - | composite resizedRibbon.png - $&#123;TARGET_PATH&#125;</div><div class="line">    fi</div><div class="line">    if [ &quot;$&#123;CONFIGURATION&#125;&quot; == &quot;AdHoc&quot; ]; then</div><div class="line">    convert betaRibbon.png -resize $WIDTHx$WIDTH resizedRibbon.png</div><div class="line">    convert $&#123;BASE_IMAGE_PATH&#125; -fill white -font Times-Bold -pointsize $&#123;FONT_SIZE&#125; -gravity south -annotate 0 &quot;$buildNumber&quot; - | composite resizedRibbon.png - $&#123;TARGET_PATH&#125;</div><div class="line">    fi</div><div class="line">&#125;</div><div class="line"></div><div class="line">changeAppIcon &quot;AppIcon76x76@2x~ipad.png&quot;</div><div class="line">changeAppIcon &quot;AppIcon76x76~ipad.png&quot;</div><div class="line">changeAppIcon &quot;AppIconx40x40@2x~ipad.png&quot;</div><div class="line">changeAppIcon &quot;AppIcon40x40~ipad.png&quot;</div><div class="line">changeAppIcon &quot;AppIcon29x29@2x~ipad.png&quot;</div><div class="line">changeAppIcon &quot;AppIcon29x29~ipad.png&quot;</div><div class="line"></div><div class="line">echo &quot;finish&quot;</div></pre></td></tr></table></figure>
<p><strong>需要注意的几点有</strong></p>
<ul>
<li>路径问题（可以看到以上脚本跟原文中的有些差别）</li>
<li>图片名称，需要修改项目中AppIcon的命名</li>
<li>获取编译构建号，根据不同版本写入AppIcon中</li>
</ul>
<p>最后效果类似下图<br><img src="http://cc.cocimg.com/api/uploads/20150907/1441608383827075.png" alt=""></p>
<p>在这里再分享个<strong>根据githash更新编译构建号的脚本</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Githash=$(git --git-dir=&quot;$&#123;PROJECT_DIR&#125;/.git&quot; --work-tree=&quot;$&#123;PROJECT_DIR&#125;&quot; rev-parse --short HEAD)</div><div class="line">RevisionNumber=$(git rev-list --count HEAD)</div><div class="line">BuildTimestamp=$(date +&apos;%Y-%m-%d %H:%M&apos;)</div><div class="line">GitCommit=</div><div class="line">bundleVersion=$(/usr/libexec/PlistBuddy -c &quot;print CFBundleShortVersionString&quot; &quot;$INFOPLIST_FILE&quot;)</div><div class="line">/usr/libexec/PlistBuddy -c &quot;Set :CFBundleVersion $RevisionNumber&quot; &quot;$INFOPLIST_FILE&quot;</div><div class="line">/usr/libexec/PlistBuddy -c &quot;Set :BuildTimestamp $BuildTimestamp&quot; &quot;$INFOPLIST_FILE&quot;</div><div class="line">/usr/libexec/PlistBuddy -c &quot;Set :GitCommit $Githash&quot; &quot;$INFOPLIST_FILE&quot;</div></pre></td></tr></table></figure>
<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p><strong>目前该功能已经集成到项目中，配合jenkins集成打包，各种轻松无压力~</strong><br>以后可以在此基础上加一些其他功能，等需要时再加上咯。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求背景&quot;&gt;&lt;a href=&quot;#需求背景&quot; class=&quot;headerlink&quot; title=&quot;需求背景&quot;&gt;&lt;/a&gt;需求背景&lt;/h2&gt;&lt;p&gt;为了&lt;strong&gt;区分线上版本、测试版本以及调试版本&lt;/strong&gt;，我们在开发过程中一般会修改bunlde Id以便在一个设备上安装不同版本的App。然而问题来了，如何快速区分出桌面上的App是什么版本呢？最直观的就是&lt;strong&gt;改变App图标&lt;/strong&gt;，达到显而易见的目的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在看了&lt;a href=&quot;http://www.cocoachina.com/ios/20150909/13354.html&quot;&gt;这篇译文&lt;/a&gt;后，利用脚本可以非常便利的实现这个需求（&lt;a href=&quot;https://www.raywenderlich.com/105641/change-app-icon-build-time&quot;&gt;这是原文&lt;/a&gt;）。虽然译文翻译有些问题，但还是确实让大家能伸手一把（原文作者真心是手把手教学）。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://www.devhua.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="https://www.devhua.com/tags/iOS/"/>
    
  </entry>
  
</feed>
